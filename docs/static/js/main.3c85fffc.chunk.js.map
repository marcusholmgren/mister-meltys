{"version":3,"sources":["components/Panel/Panel.js","components/Button/Button.js","components/FreezerFlavor/FreezerFlavor.js","components/Freezer/Freezer.js","constants/freezer.js","constants/flavors.js","ducks/freezer.js","components/Freezer/FreezerContainer.js","components/Grid/Grid.js","components/Button/ButtonGroup.js","components/NewOrder/NewOrder.js","ducks/orders.js","components/NewOrder/NewOrderContainer.js","components/OrderTicket/OrderTicket.js","components/OrderOverview/OrderOverview.js","components/OrderOverview/OrderOverviewContainer.js","ducks/employees.js","components/Colleagues/Colleagues.js","components/Colleagues/ColleaguesContainer.js","components/App/App.js","store.js","index.js"],"names":["Panel","title","children","className","Button","label","priority","size","onClick","type","classes","classNames","defaultProps","FreezerFlavor","flavorName","scoops","onClickRestock","onClickFlavor","Freezer","props","flavors","Object","keys","map","bind","temperature","onClickAddProduct","UPDATE_TEMPERATURE","ADD_PRODUCT_TO_FREEZER","REMOVE_SCOOP","CHOCOLATE","VANILLA","STRAWBERRY","MOCHA","PISTACHIO","COOKIE_AND_DOUGH","COOKIES_AND_CREAM","SALTED_CARAMEL","DEFAULT_STATE","FLAVORS","actions","FREEZER","payload","name","amount","FreezerContainer","handleClickRestock","parseInt","window","prompt","isNaN","addProductToFreezer","handleClickAddProduct","allAvailableFlavors","join","handleClickFlavor","removeScoop","setInterval","randomTemperature","Math","round","random","updateTemperature","this","Component","connect","state","freezer","dispatch","Row","Column","style","flex","ButtonGroup","customerName","cone","NewOrder","handleFormSubmit","e","preventDefault","console","log","placeOrder","setState","handleDecreaseFlavor","updatedScoops","handleIncreaseFlavor","onSubmit","htmlFor","id","value","onChange","target","autoComplete","width","flavor","types","createdAt","Date","now","orderData","ordersActions","STATUSES","OrderTicket","status","onChangeStatus","onCancle","flavorRows","amountOfScoopsForFlavor","textAlign","totalScoops","reduce","total","s","colSpan","OrderOverview","index","fulfillOrder","payForOrder","horizontalScroll","orders","order","handleChangeStatus","cancelOrder","loading","data","error","getState","fetch","then","res","json","emp","catch","err","message","Colleague","photo","src","alt","Colleagues","panelContent","person","picture","thumbnail","first","ColleaguesContainer","fetchEmployees","employees","employeesActions","App","NewOrderContainer","OrderOverviewContainer","rootReducers","combineReducers","action","freezer_limit","min","freezer_empty","amount_left","max","filter","createStore","composeWithDevTools","applyMiddleware","thunk","setTimeout","store","ReactDOM","render","document","getElementById"],"mappings":"8uBAaeA,G,MATD,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACtB,OACE,sBAAKC,UAAU,QAAf,UACE,qBAAKA,UAAU,eAAf,SAA+BF,IAC/B,qBAAKE,UAAU,iBAAf,SAAiCD,S,wBCHjCE,G,MAAS,SAAC,GAAoE,IAAD,EAAjEC,EAAiE,EAAjEA,MAAOC,EAA0D,EAA1DA,SAAUH,EAAgD,EAAhDA,UAAWI,EAAqC,EAArCA,KAAMC,EAA+B,EAA/BA,QAA+B,IAAtBC,YAAsB,MAAf,SAAe,EAC3EC,EAAUC,IACd,UADwB,qCAGVL,GAAaA,GAHH,qCAILC,GAASA,GAJJ,GAMxBJ,GAGF,OACE,wBACEA,UAAWO,EACXF,QAASA,EACTC,KAAMA,EAHR,SAKGJ,MAKPD,EAAOQ,aAAe,CACpBN,SAAU,UACVE,QAAS,cAGIJ,I,EAAAA,ICbAS,G,MAZO,SAAC,GAA0D,IAAxDC,EAAuD,EAAvDA,WAAYC,EAA2C,EAA3CA,OAAQC,EAAmC,EAAnCA,eAAgBC,EAAmB,EAAnBA,cAC3D,OACE,sBAAKd,UAAU,iBAAf,UACE,sBAAKA,UAAU,wBAAwBK,QAASS,EAAhD,UACE,qBAAKd,UAAU,iCAAf,SAAiDY,IACjD,qBAAKZ,UAAU,uBAAf,SAAuCW,OAEzC,cAAC,EAAD,CAAQN,QAASQ,EAAgBb,UAAU,iCAAiCE,MAAM,iB,SCmDzEa,EAzBC,SAACC,GACb,IAAMC,EAAUC,OAAOC,KAAKH,EAAMC,SAASG,KAAI,SAAAT,GAAU,OACrD,cAAC,EAAD,CAEIE,eAAgBG,EAAMH,eAAeQ,KAAK,EAAMV,GAChDG,cAAeE,EAAMF,cAAcO,KAAK,EAAMV,GAC9CA,WAAYA,EACZC,OAAQI,EAAMC,QAAQN,IAJjBA,MAQTb,EAAK,uBAAgBkB,EAAMM,YAAtB,MAKT,OAJKN,EAAMM,cACPxB,EAAQ,WAIR,eAAC,EAAD,CAAOA,MAAOA,EAAd,UACI,cAAC,EAAD,CAAQI,MAAM,cAAcG,QAASW,EAAMO,oBAC3C,uBACCN,M,OC3DAO,EAAqB,qBAErBC,EAAyB,yBAEzBC,EAAe,eCJfC,EAAY,YAEZC,EAAU,UAEVC,EAAa,aAEbC,EAAQ,QAERC,EAAY,YAEZC,EAAmB,mBAEnBC,EAAoB,oBAEpBC,EAAiB,iBCVxBC,EAAgB,CAClBb,YAAa,KACbL,SAAO,mBACFmB,EAAqB,IADnB,cAEFA,EAAyB,IAFvB,IAuCJ,IAAMC,EAAU,SACDf,GACd,MAAO,CACHhB,KAAMgC,EACNC,QAASjB,IAJRe,EAAU,SAOCG,EAAMC,GACtB,MAAO,CACHnC,KAAMgC,EACNC,QAAS,CACLC,KAAMA,EACNC,OAAQA,KAZXJ,EAAU,SAgBP1B,GACR,MAAO,CACHL,KAAMgC,EACNC,QAAS5B,ICzDf+B,E,4MAUFC,mBAAqB,SAAChC,GAClB,IAAM8B,EAASG,SAASC,OAAOC,OAAP,kCAAyCnC,KAC5DoC,MAAMN,IACP,EAAKzB,MAAMgC,oBAAoBrC,EAAY8B,I,EAKnDQ,sBAAwB,WACpB,IAAMC,EAAsBhC,OAAOC,KAAKiB,GAClCzB,EAAakC,OAAOC,OAAP,qDAA4DI,EAAoBC,KAAK,MAArF,MACff,EAAQzB,IACR,EAAKgC,mBAAmBhC,I,EAKhCyC,kBAAoB,SAACzC,GACjB,EAAKK,MAAMqC,YAAY1C,I,kEA1BN,IAAD,OAChB2C,aAAY,WACR,IAAMC,GAAqBC,KAAKC,MAAsB,GAAhBD,KAAKE,UAC3C,EAAK1C,MAAM2C,kBAAkBJ,KAC9B,O,+BA0BH,OACI,cAAC,EAAD,CACItC,QAAS2C,KAAK5C,MAAMC,QACpBK,YAAasC,KAAK5C,MAAMM,YACxBT,eAAgB+C,KAAKjB,mBACrB7B,cAAe8C,KAAKR,kBACpB7B,kBAAmBqC,KAAKX,4B,GAtCTY,aAyDhBC,eAZS,SAACC,GAAD,MAAY,CAChC9C,QAAS8C,EAAMC,QAAQ/C,QACvBK,YAAayC,EAAMC,QAAQ1C,gBAIJ,SAAC2C,GAAD,MAAe,CACtCN,kBAAmB,SAACrC,GAAD,OAAiB2C,EAAS5B,EAA0Bf,KACvE0B,oBAAqB,SAACrC,EAAY8B,GAAb,OAAwBwB,EAAS5B,EAA4B1B,EAAY8B,KAC9FY,YAAa,SAAC1C,GAAD,OAAgBsD,EAAS5B,EAAoB1B,QAG/CmD,CAA6CpB,GC5D/CwB,G,MAAM,SAAC,GAAkB,IAAhBnE,EAAe,EAAfA,SACpB,OACE,qBAAKC,UAAU,WAAf,SACGD,MAKMoE,EAAS,SAAC,GAAwB,IAAtBpE,EAAqB,EAArBA,SAAUK,EAAW,EAAXA,KACjC,OACE,qBAAKJ,UAAU,WAAWoE,MAAO,CAAEC,KAAMjE,GAAzC,SACGL,KAKPoE,EAAO1D,aAAe,CACpBL,KAAM,K,UCTOkE,EARK,SAAC,GAAkB,IAAhBvE,EAAe,EAAfA,SACrB,OACE,qBAAKC,UAAU,eAAf,SACGD,KCIDoC,G,MAAgB,CAClBoC,aAAc,GACd3D,OAAQ,GACR4D,MAAM,IAsHKC,E,kDAlHX,WAAYzD,GAAQ,IAAD,8BACf,cAAMA,IAMV0D,iBAAmB,SAACC,GAChBA,EAAEC,iBACFC,QAAQC,IAAI,cAAe,EAAKf,OAChC,EAAK/C,MAAM+D,WAAW,EAAKhB,OAC3B,EAAKiB,SAAS7C,IAXC,EAcnB8C,qBAAuB,SAACtE,GACpB,GAAK,EAAKoD,MAAMnD,OAAOD,GAIvB,GAAsC,IAAlC,EAAKoD,MAAMnD,OAAOD,GAAmB,CACrC,IAAMuE,EAAa,eACZ,EAAKnB,MAAMnD,eAEXsE,EAAcvE,GAErB,EAAKqE,SAAS,CACVpE,OAAQsE,SAGZ,EAAKF,SAAS,CACVpE,OAAO,2BACA,EAAKmD,MAAMnD,QADZ,kBAEDD,EAAa,EAAKoD,MAAMnD,OAAOD,GAAc,OAhC3C,EAsCnBwE,qBAAuB,SAACxE,GACpB,EAAKqE,SAAS,CACVpE,OAAO,2BACA,EAAKmD,MAAMnD,QADZ,kBAEDD,GAAc,EAAKoD,MAAMnD,OAAOD,IAAe,GAAK,OAxC7D,EAAKoD,MAAL,eACO5B,GAHQ,E,qDA+CT,IAAD,OACL,OACI,cAAC,EAAD,CAAOrC,MAAM,YAAb,SACI,uBAAME,UAAU,iBAAiBoF,SAAUxB,KAAKc,iBAAhD,UACI,eAAC,EAAD,WACI,eAAC,EAAD,WACI,uBAAOW,QAAQ,gBAAf,2BACA,uBACI/E,KAAK,OACLgF,GAAG,gBACH9C,KAAK,OACL+C,MAAO3B,KAAKG,MAAMQ,aAClBiB,SAAU,SAAAb,GAAC,OAAI,EAAKK,SAAS,CAACT,aAAcI,EAAEc,OAAOF,SACrDG,aAAa,WAGrB,eAAC,EAAD,WACI,8CACA,eAAC,EAAD,WACI,cAAC,EAAD,CACIxF,MAAM,MACNC,SAAWyD,KAAKG,MAAMS,KAAmB,YAAZ,UAC7BnE,QAAS,kBAAM,EAAK2E,SAAS,CAACR,MAAM,OAExC,cAAC,EAAD,CACItE,MAAM,OACNC,SAAUyD,KAAKG,MAAMS,KAAO,UAAY,YACxCnE,QAAS,kBAAM,EAAK2E,SAAS,CAACR,MAAM,gBAMpD,2CACA,wBAAOxE,UAAU,yBAAjB,UACI,qCACI,qBAAK2F,MAAM,QACX,qBAAKA,MAAM,WAEf,gCACCzE,OAAOC,KAAKiB,GAAShB,KAAI,SAAAwE,GAAM,OAC5B,+BACI,6BACI,iCAASA,MAEb,6BACI,eAAC,EAAD,WACI,cAAC,EAAD,CAAQxF,KAAK,QAAQF,MAAM,IAAIC,SAAS,UAChCE,QAAS,kBAAM,EAAK4E,qBAAqBW,MACjD,cAAC,EAAD,CAAQxF,KAAK,QAAQF,MAAO,EAAK6D,MAAMnD,OAAOgF,IAAW,EACjDzF,SAAS,cACjB,cAAC,EAAD,CAAQC,KAAK,QAAQF,MAAM,IAAIC,SAAS,UAChCE,QAAS,kBAAM,EAAK8E,qBAAqBS,aAXpDA,WAmBjB,cAAC,EAAD,CAAQ5F,UAAU,0BAA0BE,MAAM,YAAYI,KAAK,oB,GA5GhEuD,a,QCjBVgC,EACI,cADJA,EAEM,gBAFNA,EAGM,gBAHNA,EAIK,eA8CX,IAAMxD,EAAU,YACsD,IAA7DkC,EAA4D,EAA5DA,aAA4D,IAA9CuB,iBAA8C,MAAlCC,KAAKC,MAA6B,MAAtBxB,YAAsB,SAAT5D,EAAS,EAATA,OAC3D,MAAO,CACHN,KAAMuF,EACNtD,QAAS,CAACgC,eAAcuB,YAAWtB,OAAM5D,YAJxCyB,EAAU,SAONiD,GACT,MAAO,CACHhF,KAAMuF,EACNtD,QAAS+C,IAVRjD,EAAU,SAaPiD,GACR,MAAO,CACHhF,KAAMuF,EACNtD,QAAS+C,IAhBRjD,GAAU,SAmBPiD,GACR,MAAO,CACHhF,KAAMuF,EACNtD,QAAS+C,IChENxB,eAAQ,MAJI,SAACG,GAAD,MAAe,CACtCc,WAAY,SAACkB,GAAD,OAAehC,EAASiC,EAAyBD,QAGlDnC,CAAkCW,GCJ3C0B,I,MAAW,CACb,UACA,YACA,SAyCWC,GAtCK,SAAC,GAA+E,IAA9E7B,EAA6E,EAA7EA,aAAyBC,GAAoD,EAA/DsB,UAA+D,EAApDtB,MAAM5D,EAA8C,EAA9CA,OAAQyF,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,eAAgBC,EAAc,EAAdA,SAC3EC,EAAatF,OAAOC,KAAKP,GAAQQ,KAAI,SAAAT,GACvC,IAAM8F,EAA0B7F,EAAOD,GACvC,OACI,qBAAqBX,UAAU,uBAA/B,UACI,6BAAKW,IACL,oBAAIyD,MAAO,CAACsC,UAAW,SAAvB,SAAkCD,MAF7B9F,MAMXgG,EAAczF,OAAOC,KAAKP,GAAQgG,QACpC,SAACC,EAAOlG,GAAR,OAAuBkG,EAAQjG,EAAOD,KACtC,GAGJ,OACI,sBAAKX,UAAU,eAAf,UACI,uBAAOA,UAAU,sBAAjB,SACI,kCACA,qBAAIA,UAAU,gCAAd,UACI,6BAAI,wBAAQA,UAAU,qBAAlB,SAAwCuE,MAC5C,6BACI,wBAAQvE,UAAU,uBAAuBuF,MAAOc,EAAQb,SAAU,SAACb,GAAD,OAAO2B,EAAe3B,EAAEc,OAAOF,QAAjG,SACKY,GAAS/E,KAAI,SAAA0F,GAAC,OAAI,wBAAgBvB,MAAOuB,EAAvB,SAA2BA,GAAdA,aAI5C,oBAAI9G,UAAU,6BAAd,SACI,qBAAI+G,QAAS,EAAb,UAAgB,iCAASvC,EAAO,OAAS,QAAzC,WAA4DmC,EAA5D,eAEHH,OAGL,wBAAQnG,QAASkG,EAAjB,wBCNGS,G,iLA9BQC,EAAOZ,GACtB,OAAQA,GACJ,IAAK,YACDzC,KAAK5C,MAAMkG,aAAaD,GACxB,MACJ,IAAK,OACDrD,KAAK5C,MAAMmG,YAAYF,M,+BAQzB,IAAD,OACL,OACI,cAAC,EAAD,CAAOnH,MAAM,SAASsH,kBAAgB,EAAtC,SACKxD,KAAK5C,MAAMqG,OAAOjG,KAAI,SAACkG,EAAOL,GAAR,OACnB,cAAC,GAAD,2BAEQK,GAFR,IAGIhB,eAAgB,SAACD,GAAD,OAAY,EAAKkB,mBAAmBN,EAAOZ,IAC3DE,SAAU,kBAAM,EAAKvF,MAAMwG,YAAYP,MAHlCK,EAAMxB,oB,GApBPjC,aCUbC,gBAXS,SAACC,GAAD,MAAY,CAChCsD,OAAQtD,EAAMsD,WAIS,SAACpD,GAAD,MAAe,CACtCiD,aAAc,SAACD,GAAD,OAAWhD,EAASiC,EAA2Be,KAC7DE,YAAa,SAACF,GAAD,OAAWhD,EAASiC,EAA0Be,KAC3DO,YAAa,SAACP,GAAD,OAAWhD,EAASiC,GAA0Be,QAGhDnD,CAA6CkD,IChB/CnB,GACgB,0BADhBA,GAEgB,0BAFhBA,GAGgB,0BAIvB1D,GAAgB,CAClBsF,SAAS,EACTC,KAAM,GACNC,MAAO,MA6BJ,IAAMtF,GAAU,WAEf,OAAO,SAAU4B,EAAU2D,GAKvB,OAJA3D,EAAS,CACL3D,KAAMuF,KAGHgC,MAAM,mBACRC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAAG,OAAIhE,EAAS,CAClB3D,KAAMuF,GACNtD,QAAS0F,OAEZC,OAAM,SAAAC,GAEH,OAAOlE,EAAS,CAChB3D,KAAMuF,GACNtD,QAAS4F,EAAIC,eClD3BC,I,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,MAAO9F,EAAT,EAASA,KAAM6D,EAAf,EAAeA,OAAf,OACd,qBAAIrG,UAAU,YAAd,UACI,6BACI,qBAAKA,UAAU,mBAAmBuI,IAAKD,EAAOE,IAAKhG,MAEvD,qBAAIxC,UAAU,kBAAd,UACI,qBAAKA,UAAU,kBAAf,SAAkCwC,IAClC,qBAAKxC,UAAU,oBAAf,SAAoCqG,YAgDjCoC,G,uKAzCP,IAAIC,EAiCJ,OA9BIA,EADA9E,KAAK5C,MAAMyG,QAEP,2CAGA7D,KAAK5C,MAAM2G,MAEP,8EAAgD,+BAAO/D,KAAK5C,MAAM2G,WAIlE,wBAAO3H,UAAU,mBAAjB,UACI,qCACI,qBAAK2F,MAAM,MACX,qBAAKA,MAAM,YAEf,gCACC/B,KAAK5C,MAAM0G,KAAKtG,KAAI,SAACuH,EAAQ1B,GAAT,OACjB,cAAC,GAAD,CAEIqB,MAAOK,EAAOC,QAAQC,UACtBrG,KAAMmG,EAAOnG,KAAKsG,MAClBzC,OAAQsC,EAAOtC,QAHVY,WAazB,cAAC,EAAD,CAAOnH,MAAM,aAAb,SACK4I,Q,GArCQ7E,aCXnBkF,G,kLAEEnF,KAAK5C,MAAMgI,mB,+BAGX,OACI,cAAC,GAAD,eAAgBpF,KAAK5C,MAAMiI,gB,GANLpF,aAuBnBC,gBAXS,SAACC,GAAD,MAAY,CAChCkF,UAAWlF,EAAMkF,cAIM,SAAChF,GAAD,MAAe,CACtC+E,eAAiB,kBAAM/E,EAASiF,UAKrBpF,CAA6CiF,ICM7CI,I,6KAxBX,OACE,uBAAMnJ,UAAU,MAAhB,UACE,qBAAKA,UAAU,OAAOuI,IAAI,YAAYC,IAAI,6BAC1C,eAAC,EAAD,WACE,cAAC,EAAD,UACE,cAAC,EAAD,MAEF,cAAC,EAAD,UACE,cAACY,GAAD,SAGJ,eAAC,EAAD,WACE,cAAC,EAAD,CAAQhJ,KAAM,EAAd,SACE,cAACiJ,GAAD,MAEF,cAAC,EAAD,CAAQjJ,KAAM,EAAd,SACE,cAAC,GAAD,gB,GAlBMyD,c,0BCFZyF,GAAeC,2BAAgB,CACjCvF,QdGG,WAAiD,IAAhCD,EAA+B,uDAAvB5B,EAAeqH,EAAQ,uCACnD,OAAQA,EAAOlJ,MACX,KAAKgC,EACD,OAAO,2BACAyB,GADP,IAEIzC,YAAakI,EAAOjH,UAE5B,KAAKD,EACD,IAAMmH,EAAgB,GAChBhH,GAAUsB,EAAM9C,QAAQuI,EAAOjH,QAAQC,OAAS,GAAKgH,EAAOjH,QAAQE,OAC1E,OAAO,2BACAsB,GADP,IAEI9C,QAAQ,2BACD8C,EAAM9C,SADN,kBAEFuI,EAAOjH,QAAQC,KAAOgB,KAAKkG,IAAIjH,EAAQgH,OAGpD,KAAKnH,EACD,IAAMqH,EAAgB,EAChBC,EAAc7F,EAAM9C,QAAQuI,EAAOjH,SAAS,EAClD,OAAO,2BACAwB,GADP,IAEI9C,QAAQ,2BACD8C,EAAM9C,SADN,kBAEduI,EAAOjH,QAAUiB,KAAKqG,IAAID,EAAaD,OAGxC,QACI,OAAO5F,Ic9BfsD,OTFG,WAAsC,IAArBtD,EAAoB,uDAAZ,GAAIyF,EAAQ,uCACxC,OAAQA,EAAOlJ,MACX,KAAKuF,EACD,MAAM,GAAN,mBACO9B,GADP,4BAGWyF,EAAOjH,SAHlB,IAIQ8D,OAAQ,cAGpB,KAAKR,EACD,OAAO9B,EAAM3C,KAAI,SAAUkG,EAAOL,GAC9B,OAAIA,IAAUuC,EAAOjH,QACV,2BACA+E,GADP,IAEIjB,OAAQ,cAITiB,KAEf,KAAKzB,EACD,OAAO9B,EAAM3C,KAAI,SAAUkG,EAAOL,GAC9B,OAAIA,IAAUuC,EAAOjH,QACV,2BACA+E,GADP,IAEIjB,OAAQ,SAITiB,KAEf,KAAKzB,EACD,OAAO9B,EAAM+F,QAAO,SAAUxC,EAAOL,GACjC,OAAOA,IAAUuC,EAAOjH,WAEhC,QACI,OAAOwB,ISlCfkF,UJGG,WAAiD,IAAhClF,EAA+B,uDAAvB5B,GAAeqH,EAAQ,uCACnD,OAAQA,EAAOlJ,MACX,KAAKuF,GACD,OAAO,2BACA9B,GADP,IAEI0D,SAAS,IAEjB,KAAK5B,GACD,OAAO,2BACA9B,GADP,IAEI0D,SAAS,EACTC,KAAM8B,EAAOjH,UAErB,KAAKsD,GACD,OAAO,2BACA9B,GADP,IAEI0D,SAAS,EACTE,MAAO6B,EAAOjH,UAEtB,QACI,OAAOwB,MIpBJgG,0BAAYT,GAAcU,+BACrCC,2BAAgBC,QCJpBC,YAAW,WACPC,GAAMnG,SAAS5B,EAA4BD,EAAmB,OAC/D,MAEHiI,IAASC,OAED,cAAC,IAAD,CAAUF,MAAOA,GAAjB,SACI,cAAC,GAAD,MAGVG,SAASC,eAAe,W","file":"static/js/main.3c85fffc.chunk.js","sourcesContent":["import React from 'react';\n\nimport './Panel.css';\n\nconst Panel = ({ title, children }) => {\n  return (\n    <div className=\"panel\">\n      <div className=\"panel__title\">{title}</div>\n      <div className=\"panel__content\">{children}</div>\n    </div>\n  );\n};\n\nexport default Panel;\n","import React from 'react';\nimport classNames from 'classnames';\n\nimport './Button.css';\n\nconst Button = ({ label, priority, className, size, onClick, type = 'button' }) => {\n  const classes = classNames(\n    'button',\n    {\n      [`button--${priority}`]: priority,\n      [`button--size-${size}`]: size,\n    },\n    className,\n  );\n\n  return (\n    <button\n      className={classes}\n      onClick={onClick}\n      type={type}\n    >\n      {label}\n    </button>\n  );\n};\n\nButton.defaultProps = {\n  priority: 'primary',\n  onClick: () => {},\n};\n\nexport default Button;\n","import React from 'react';\n\nimport Button from '../Button/Button';\n\nimport './FreezerFlavor.css';\n\nconst FreezerFlavor = ({ flavorName, scoops, onClickRestock, onClickFlavor}) => {\n  return (\n    <div className=\"freezer-flavor\">\n      <div className=\"freezer-flavor__inner\" onClick={onClickFlavor}>\n        <div className=\"freezer-flavor__scoops-counter\">{scoops}</div>\n        <div className=\"freezer-flavor__name\">{flavorName}</div>\n      </div>\n      <Button onClick={onClickRestock} className=\"freezer-flavor__restock-button\" label=\"Restock\"/>\n    </div>\n  );\n};\n\nexport default FreezerFlavor;\n","//import React, {Component} from 'react';\nimport React from 'react';\n\n\nimport Panel from '../Panel/Panel';\nimport Button from '../Button/Button';\nimport FreezerFlavor from '../FreezerFlavor/FreezerFlavor';\n\n/*\nclass Freezer2 extends Component {\n\n    render() {\n        const flavors = Object.keys(this.props.flavors).map(flavorName => (\n            <FreezerFlavor\n                key={flavorName}\n                onClickRestock={this.props.onClickRestock.bind(this, flavorName)}\n                onClickFlavor={this.props.onClickFlavor.bind(this, flavorName)}\n                flavorName={flavorName}\n                scoops={this.props.flavors[flavorName]}\n            />\n        ));\n\n        let title = `Freezer (°${this.props.temperature}C)`;\n        if (!this.props.temperature) {\n            title = 'Freezer';\n        }\n\n        return (\n            <Panel title={title}>\n                <Button label=\"Add product\" onClick={this.props.onClickAddProduct}/>\n                <br/>\n                {flavors}\n            </Panel>\n        );\n    }\n}\n*/\n\n\nconst Freezer = (props) => {\n    const flavors = Object.keys(props.flavors).map(flavorName => (\n        <FreezerFlavor\n            key={flavorName}\n            onClickRestock={props.onClickRestock.bind(this, flavorName)}\n            onClickFlavor={props.onClickFlavor.bind(this, flavorName)}\n            flavorName={flavorName}\n            scoops={props.flavors[flavorName]}\n        />\n    ));\n\n    let title = `Freezer (°${props.temperature}C)`;\n    if (!props.temperature) {\n        title = 'Freezer';\n    }\n\n    return (\n        <Panel title={title}>\n            <Button label=\"Add product\" onClick={props.onClickAddProduct}/>\n            <br/>\n            {flavors}\n        </Panel>\n    );\n};\n\nexport default Freezer;\n\n","export const UPDATE_TEMPERATURE = 'UPDATE_TEMPERATURE';\n\nexport const ADD_PRODUCT_TO_FREEZER = 'ADD_PRODUCT_TO_FREEZER';\n\nexport const REMOVE_SCOOP = 'REMOVE_SCOOP';\n","export const CHOCOLATE = 'CHOCOLATE';\n\nexport const VANILLA = 'VANILLA';\n\nexport const STRAWBERRY = 'STRAWBERRY';\n\nexport const MOCHA = 'MOCHA';\n\nexport const PISTACHIO = 'PISTACHIO';\n\nexport const COOKIE_AND_DOUGH = 'COOKIE_AND_DOUGH';\n\nexport const COOKIES_AND_CREAM = 'COOKIES_AND_CREAM';\n\nexport const SALTED_CARAMEL = 'SALTED_CARAMEL';\n","import * as FREEZER from \"../constants/freezer\";\nimport * as FLAVORS from '../constants/flavors';\n\n\nconst DEFAULT_STATE = {\n    temperature: null,\n    flavors: {\n        [FLAVORS.STRAWBERRY]: 10,\n        [FLAVORS.SALTED_CARAMEL]: 20\n    }\n};\n\nexport function reducer(state = DEFAULT_STATE, action) {\n    switch (action.type) {\n        case FREEZER.UPDATE_TEMPERATURE:\n            return {\n                ...state,\n                temperature: action.payload\n            };\n        case FREEZER.ADD_PRODUCT_TO_FREEZER:\n            const freezer_limit = 60;\n            const amount = (state.flavors[action.payload.name] || 0) + action.payload.amount;\n            return {\n                ...state,\n                flavors: {\n                    ...state.flavors,\n                    [action.payload.name]: Math.min(amount, freezer_limit)\n                }\n            };\n        case FREEZER.REMOVE_SCOOP:\n            const freezer_empty = 0;\n            const amount_left = state.flavors[action.payload]-1;\n            return {\n                ...state,\n                flavors: {\n                    ...state.flavors,\n        [action.payload]: Math.max(amount_left, freezer_empty)\n                }\n            }\n        default:\n            return state\n    }\n}\n\n\nexport const actions = {\n    updateTemperature(temperature) {\n        return {\n            type: FREEZER.UPDATE_TEMPERATURE,\n            payload: temperature\n        };\n    },\n    addProductToFreezer(name, amount) {\n        return {\n            type: FREEZER.ADD_PRODUCT_TO_FREEZER,\n            payload: {\n                name: name,\n                amount: amount\n            }\n        };\n    },\n    removeScoop(flavorName) {\n        return {\n            type: FREEZER.REMOVE_SCOOP,\n            payload: flavorName\n        }\n    }\n};\n","import React, {Component} from 'react';\nimport {connect} from 'react-redux';\n\nimport Freezer from './Freezer';\nimport {actions} from '../../ducks/freezer';\nimport * as FLAVORS from '../../constants/flavors';\n\nclass FreezerContainer extends Component {\n\n    componentDidMount() {\n        setInterval(() => {\n            const randomTemperature = -Math.round(Math.random() * 10);\n            this.props.updateTemperature(randomTemperature);\n        }, 2000)\n    }\n\n\n    handleClickRestock = (flavorName) => {\n        const amount = parseInt(window.prompt(`Enter amount to restock ${flavorName}`));\n        if (!isNaN(amount)) {\n            this.props.addProductToFreezer(flavorName, amount);\n        }\n    };\n\n\n    handleClickAddProduct = () => {\n        const allAvailableFlavors = Object.keys(FLAVORS);\n        const flavorName = window.prompt(`Enter flavor name to restock. (Choose from ${allAvailableFlavors.join(', ')})`);\n        if (FLAVORS[flavorName]) {\n            this.handleClickRestock(flavorName);\n        }\n    };\n\n\n    handleClickFlavor = (flavorName) => {\n        this.props.removeScoop(flavorName);\n    };\n\n    render() {\n        return (\n            <Freezer\n                flavors={this.props.flavors}\n                temperature={this.props.temperature}\n                onClickRestock={this.handleClickRestock}\n                onClickFlavor={this.handleClickFlavor}\n                onClickAddProduct={this.handleClickAddProduct}\n            />\n        );\n    }\n}\n\n\nconst mapStateToProps = (state) => ({\n    flavors: state.freezer.flavors,\n    temperature: state.freezer.temperature\n});\n\n\nconst mapDispatchToProps = (dispatch) => ({\n    updateTemperature: (temperature) => dispatch(actions.updateTemperature(temperature)),\n    addProductToFreezer: (flavorName, amount) => dispatch(actions.addProductToFreezer(flavorName, amount)),\n    removeScoop: (flavorName) => dispatch(actions.removeScoop(flavorName))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FreezerContainer);\n\n","import React from 'react';\n\nimport './Grid.css';\n\nexport const Row = ({ children }) => {\n  return (\n    <div className=\"grid-row\">\n      {children}\n    </div>\n  );\n};\n\nexport const Column = ({ children, size }) => {\n  return (\n    <div className=\"grid-col\" style={{ flex: size }}>\n      {children}\n    </div>\n  );\n};\n\nColumn.defaultProps = {\n  size: '1',\n};\n","import React from 'react';\n\nimport './ButtonGroup.css';\n\nconst ButtonGroup = ({ children }) => {\n  return (\n    <div className=\"button-group\">\n      {children}\n    </div>\n  );\n};\n\nexport default ButtonGroup;\n\n","import React, {Component} from 'react';\n\nimport Panel from '../Panel/Panel';\nimport {Column, Row} from '../Grid/Grid';\nimport ButtonGroup from '../Button/ButtonGroup';\nimport Button from '../Button/Button';\n\nimport * as FLAVORS from '../../constants/flavors';\n\nimport './NewOrder.css';\n\nconst DEFAULT_STATE = {\n    customerName: '',\n    scoops: {},\n    cone: false,\n};\n\nclass NewOrder extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            ...DEFAULT_STATE,\n        };\n    }\n\n    handleFormSubmit = (e) => {\n        e.preventDefault();\n        console.log('Order data:', this.state);\n        this.props.placeOrder(this.state);\n        this.setState(DEFAULT_STATE);\n    };\n\n    handleDecreaseFlavor = (flavorName) => {\n        if (!this.state.scoops[flavorName]) {\n            return;\n        }\n\n        if (this.state.scoops[flavorName] === 1) {\n            const updatedScoops = {\n                ...this.state.scoops,\n            };\n            delete updatedScoops[flavorName];\n\n            this.setState({\n                scoops: updatedScoops,\n            });\n        } else {\n            this.setState({\n                scoops: {\n                    ...this.state.scoops,\n                    [flavorName]: this.state.scoops[flavorName] - 1,\n                },\n            });\n        }\n    };\n\n    handleIncreaseFlavor = (flavorName) => {\n        this.setState({\n            scoops: {\n                ...this.state.scoops,\n                [flavorName]: (this.state.scoops[flavorName] || 0) + 1,\n            },\n        });\n    };\n\n    render() {\n        return (\n            <Panel title=\"New order\">\n                <form className=\"new-order-form\" onSubmit={this.handleFormSubmit}>\n                    <Row>\n                        <Column>\n                            <label htmlFor=\"customer-name\">Customer name</label>\n                            <input\n                                type=\"text\"\n                                id=\"customer-name\"\n                                name=\"name\"\n                                value={this.state.customerName}\n                                onChange={e => this.setState({customerName: e.target.value})}\n                                autoComplete=\"off\"\n                            />\n                        </Column>\n                        <Column>\n                            <label>Container</label>\n                            <ButtonGroup>\n                                <Button\n                                    label=\"Cup\"\n                                    priority={!this.state.cone ? 'primary' : 'secondary'}\n                                    onClick={() => this.setState({cone: false})}\n                                />\n                                <Button\n                                    label=\"Cone\"\n                                    priority={this.state.cone ? 'primary' : 'secondary'}\n                                    onClick={() => this.setState({cone: true})}\n                                />\n                            </ButtonGroup>\n                        </Column>\n                    </Row>\n\n                    <label>Scoops</label>\n                    <table className=\"new-order-scoops-table\">\n                        <colgroup>\n                            <col width=\"80%\"/>\n                            <col width=\"20%\"/>\n                        </colgroup>\n                        <tbody>\n                        {Object.keys(FLAVORS).map(flavor => (\n                            <tr key={flavor}>\n                                <td>\n                                    <strong>{flavor}</strong>\n                                </td>\n                                <td>\n                                    <ButtonGroup>\n                                        <Button size=\"small\" label=\"-\" priority=\"primary\"\n                                                onClick={() => this.handleDecreaseFlavor(flavor)}/>\n                                        <Button size=\"small\" label={this.state.scoops[flavor] || 0}\n                                                priority=\"secondary\"/>\n                                        <Button size=\"small\" label=\"+\" priority=\"primary\"\n                                                onClick={() => this.handleIncreaseFlavor(flavor)}/>\n                                    </ButtonGroup>\n                                </td>\n                            </tr>\n                        ))}\n                        </tbody>\n                    </table>\n\n                    <Button className=\"new-order-submit-button\" label=\"Add order\" type=\"submit\"/>\n                </form>\n            </Panel>\n        );\n    }\n};\n\nexport default NewOrder;\n\n","export const types = {\n    PLACE_ORDER: 'PLACE_ORDER',\n    FULFILL_ORDER: 'FULFILL_ORDER',\n    PAY_FOR_ORDER: 'PAY_FOR_ORDER',\n    CANCEL_ORDER: 'CANCEL_ORDER'\n};\n\n\nexport function reducer(state = [], action) {\n    switch (action.type) {\n        case types.PLACE_ORDER:\n            return [\n                ...state,\n                {\n                    ...action.payload,\n                    status: 'pending'\n                }\n            ];\n        case types.FULFILL_ORDER:\n            return state.map(function (order, index) {\n                if (index === action.payload) {\n                    return {\n                        ...order,\n                        status: 'fulfilled'\n                    }\n                }\n\n                return order;\n            });\n        case types.PAY_FOR_ORDER:\n            return state.map(function (order, index) {\n                if (index === action.payload) {\n                    return {\n                        ...order,\n                        status: 'paid'\n                    }\n                }\n\n                return order;\n            });\n        case types.CANCEL_ORDER:\n            return state.filter(function (order, index) {\n                return index !== action.payload;\n            });\n        default:\n            return state;\n    }\n}\n\n\nexport const actions = {\n    placeOrder({customerName, createdAt = Date.now(), cone = true, scoops}) {\n        return {\n            type: types.PLACE_ORDER,\n            payload: {customerName, createdAt, cone, scoops}\n        }\n    },\n    fulfillOrder(id) {\n        return {\n            type: types.FULFILL_ORDER,\n            payload: id\n        }\n    },\n    payForOrder(id) {\n        return {\n            type: types.PAY_FOR_ORDER,\n            payload: id\n        }\n    },\n    cancelOrder(id) {\n        return {\n            type: types.CANCEL_ORDER,\n            payload: id\n        }\n    }\n};\n","import {connect} from 'react-redux';\nimport NewOrder from './NewOrder';\nimport {actions as ordersActions} from '../../ducks/orders';\n\nconst mapDispatchToProps = (dispatch) => ({\n    placeOrder: (orderData) => dispatch(ordersActions.placeOrder(orderData))\n});\n\nexport default connect(null, mapDispatchToProps)(NewOrder);\n","import React from 'react';\n\nimport './OrderTicket.css';\n\nconst STATUSES = [\n    'pending',\n    'fulfilled',\n    'paid',\n];\n\nconst OrderTicket = ({customerName, createdAt, cone, scoops, status, onChangeStatus, onCancle}) => {\n    const flavorRows = Object.keys(scoops).map(flavorName => {\n        const amountOfScoopsForFlavor = scoops[flavorName];\n        return (\n            <tr key={flavorName} className=\"order-ticket__flavor\">\n                <td>{flavorName}</td>\n                <td style={{textAlign: 'right'}}>{amountOfScoopsForFlavor}</td>\n            </tr>\n        );\n    });\n    const totalScoops = Object.keys(scoops).reduce(\n        (total, flavorName) => total + scoops[flavorName],\n        0\n    );\n\n    return (\n        <div className=\"order-ticket\">\n            <table className=\"order-ticket__table\">\n                <tbody>\n                <tr className=\"order-ticket__name-and-status\">\n                    <td><strong className=\"order-ticket__name\">{customerName}</strong></td>\n                    <td>\n                        <select className=\"order-ticket__status\" value={status} onChange={(e) => onChangeStatus(e.target.value)}>\n                            {STATUSES.map(s => <option key={s} value={s}>{s}</option>)}\n                        </select>\n                    </td>\n                </tr>\n                <tr className=\"order-ticket__product-info\">\n                    <td colSpan={2}><strong>{cone ? 'Cone' : 'Cup'}</strong> — {totalScoops} scoops</td>\n                </tr>\n                {flavorRows}\n                </tbody>\n            </table>\n            <button onClick={onCancle}>Cancle</button>\n        </div>\n    );\n};\n\nexport default OrderTicket;\n\n\n","import React, {Component} from 'react';\n\nimport Panel from '../Panel/Panel';\nimport OrderTicket from '../OrderTicket/OrderTicket';\n\n\nclass OrderOverview extends Component {\n    handleChangeStatus(index, status) {\n        switch (status) {\n            case 'fulfilled':\n                this.props.fulfillOrder(index);\n                break;\n            case 'paid':\n                this.props.payForOrder(index);\n                break;\n            default:\n                break;\n        }\n    }\n\n\n    render() {\n        return (\n            <Panel title=\"Orders\" horizontalScroll>\n                {this.props.orders.map((order, index) => (\n                    <OrderTicket\n                        key={order.createdAt}\n                        {...order}\n                        onChangeStatus={(status) => this.handleChangeStatus(index, status)}\n                        onCancle={() => this.props.cancelOrder(index)}\n                    />))\n                }\n            </Panel>\n        );\n    }\n};\n\nexport default OrderOverview;\n\n","import {connect} from 'react-redux';\nimport OrderOverview from './OrderOverview';\nimport { actions as ordersActions } from '../../ducks/orders'\n\n\nconst mapStateToProps = (state) => ({\n    orders: state.orders\n});\n\n\nconst mapDispatchToProps = (dispatch) => ({\n    fulfillOrder: (index) => dispatch(ordersActions.fulfillOrder(index)),\n    payForOrder: (index) => dispatch(ordersActions.payForOrder(index)),\n    cancelOrder: (index) => dispatch(ordersActions.cancelOrder(index))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(OrderOverview);\n","export const types = {\n    FETCH_EMPLOYEES_REQUEST: 'FETCH_EMPLOYEES_REQUEST',\n    FETCH_EMPLOYEES_SUCCESS: 'FETCH_EMPLOYEES_SUCCESS',\n    FETCH_EMPLOYEES_FAILURE: 'FETCH_EMPLOYEES_FAILURE'\n};\n\n\nconst DEFAULT_STATE = {\n    loading: false,\n    data: [],\n    error: null\n};\n\n\nexport function reducer(state = DEFAULT_STATE, action) {\n    switch (action.type) {\n        case types.FETCH_EMPLOYEES_REQUEST:\n            return {\n                ...state,\n                loading: true\n            };\n        case types.FETCH_EMPLOYEES_SUCCESS:\n            return {\n                ...state,\n                loading: false,\n                data: action.payload\n            };\n        case types.FETCH_EMPLOYEES_FAILURE:\n            return {\n                ...state,\n                loading: false,\n                error: action.payload\n            };\n        default:\n            return state;\n    }\n}\n\n\nexport const actions = {\n    fetchEmployees() {\n        return function (dispatch, getState) {\n            dispatch({\n                type: types.FETCH_EMPLOYEES_REQUEST,\n            });\n\n            return fetch('/employees.json')\n                .then(res => res.json())\n                .then(emp => dispatch({\n                    type: types.FETCH_EMPLOYEES_SUCCESS,\n                    payload: emp\n                }))\n                .catch(err => {\n                    debugger;\n                    return dispatch({\n                    type: types.FETCH_EMPLOYEES_FAILURE,\n                    payload: err.message\n                })});\n        };\n    }\n};\n","import React, {Component} from 'react';\n\nimport Panel from '../Panel/Panel';\n\nimport './Colleagues.css';\n\nconst Colleague = ({photo, name, status}) => (\n    <tr className=\"colleague\">\n        <td>\n            <img className=\"colleague__photo\" src={photo} alt={name}/>\n        </td>\n        <td className=\"colleague__info\">\n            <div className=\"colleague__name\">{name}</div>\n            <div className=\"colleague__status\">{status}</div>\n        </td>\n    </tr>\n);\n\nclass Colleagues extends Component {\n    render() {\n        let panelContent;\n\n        if (this.props.loading) {\n            panelContent = (\n                <p>Loading...</p>\n            );\n        } else {\n            if (this.props.error) {\n                panelContent = (\n                    <p>Something went wrong when fetching the data: <code>{this.props.error}</code></p>\n                )\n            } else {\n                panelContent = (\n                    <table className=\"colleagues-table\">\n                        <colgroup>\n                            <col width=\"0\"/>\n                            <col width=\"100%\"/>\n                        </colgroup>\n                        <tbody>\n                        {this.props.data.map((person, index) => (\n                            <Colleague\n                                key={index}\n                                photo={person.picture.thumbnail}\n                                name={person.name.first}\n                                status={person.status}\n                            />\n                        ))}\n\n                        </tbody>\n                    </table>\n                );\n            }\n        }\n        return (\n            <Panel title=\"Colleagues\">\n                {panelContent}\n            </Panel>\n        );\n    }\n}\n\nexport default Colleagues;\n","import React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport {actions as employeesActions} from '../../ducks/employees'\nimport Colleagues from \"./Colleagues\";\n\n\n\nclass ColleaguesContainer extends Component {\n    componentDidMount() {\n        this.props.fetchEmployees();\n    }\n    render() {\n        return (\n            <Colleagues {...this.props.employees}/>\n        );\n    }\n}\n\n\nconst mapStateToProps = (state) => ({\n    employees: state.employees\n})\n\n\nconst mapDispatchToProps = (dispatch) => ({\n    fetchEmployees:  () => dispatch(employeesActions.fetchEmployees())\n});\n\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ColleaguesContainer);","import React, { Component } from 'react';\n\nimport FreezerContainer from '../Freezer/FreezerContainer';\nimport NewOrderContainer from '../NewOrder/NewOrderContainer';\nimport { Column, Row } from '../Grid/Grid';\nimport OrderOverviewContainer from '../OrderOverview/OrderOverviewContainer';\nimport ColleaguesContainer from '../Colleagues/ColleaguesContainer';\n\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <main className=\"app\">\n        <img className=\"logo\" src=\"/logo.svg\" alt=\"Mister Melty's Ice Cream\"/>\n        <Row>\n          <Column>\n            <FreezerContainer />\n          </Column>\n          <Column>\n            <NewOrderContainer />\n          </Column>\n        </Row>\n        <Row>\n          <Column size={3}>\n            <OrderOverviewContainer />\n          </Column>\n          <Column size={1}>\n            <ColleaguesContainer />\n          </Column>\n        </Row>\n      </main>\n    );\n  }\n}\n\nexport default App;\n","import {createStore, combineReducers, applyMiddleware} from 'redux';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport {reducer as freezer} from './ducks/freezer';\nimport {reducer as orders} from './ducks/orders';\nimport {reducer as employees} from './ducks/employees';\n// import logger from './middleware/logger'\n\nconst rootReducers = combineReducers({\n    freezer,\n    orders,\n    employees\n});\n\nexport default createStore(rootReducers, composeWithDevTools(\n    applyMiddleware(thunk)\n    //applyMiddleware(thunk, logger)\n));\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\n\nimport App from './components/App/App';\n\nimport store from './store';\nimport * as FLAVORS from './constants/flavors';\nimport { actions } from './ducks/freezer';\n\n\nsetTimeout(() => {\n    store.dispatch(actions.addProductToFreezer(FLAVORS.CHOCOLATE, 15));\n}, 1500);\n\nReactDOM.render(\n    (\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    ),\n  document.getElementById('root')\n);\n"],"sourceRoot":""}